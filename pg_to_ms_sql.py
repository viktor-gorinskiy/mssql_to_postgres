import config
import ms_sql
import pg_sql



class MStoPGsql():
   
    def get_MS_tables(self, ignore_tables):
        tables = mssql.get_tables(ignore_tables=ignore_tables)
        return tables

    def return_type(self, type_data, len_data, scale):          # Возвращает типы данных
        if type_data == 'int': return 'INT'
        if type_data == 'int identity': return 'INT GENERATED BY default AS IDENTITY'
        if type_data == 'smallint': return 'SMALLINT'
        if type_data == 'nchar': return f'CHAR({len_data})'
        if type_data == 'nvarchar': return f'VARCHAR({len_data})'
        if type_data == 'decimal': return f'DECIMAL({len_data}, {scale})'
        if type_data == 'float': return 'DOUBLE PRECISION'
        if type_data == 'tinyint': return 'SMALLINT'
        if type_data == 'bit': return 'BOOLEAN'
        if type_data == 'datetime': return 'TIMESTAMP'
        if type_data == 'smalldatetime': return 'TIMESTAMP'
        if type_data == 'date': return 'DATE'
        # if type_data == 'uniqueidentifier': return 'CHAR(16)'
        if type_data == 'uniqueidentifier': return 'UUID'
        if type_data == 'ntext': return 'TEXT'
        if type_data == 'bigint identity': return 'BIGINT'
        if type_data == 'image': return 'BYTEA'
        if type_data == 'varbinary': return 'BYTEA'
        return type_data

        def return_null(self, is_nul):
            if is_nul == 'YES': return 'NULL'
        return 'NOT NULL'

    def return_null(self, is_nul):
        if is_nul == 'YES': return 'NULL'
        return 'NOT NULL'
    
    def get_MStoPG_columns(self, table):                        # Возвращает столбцы с типом данных для постгрес
        # mssql.connect()
        columns = mssql.get_columns(table=table)
        sql_lines = []
        for column in columns:
            type_d = self.return_type(column[5], column[6], column[8])
            is_null= self.return_null(column[17])
            sql_line = f""""{column[3]}" {type_d} {is_null}"""
            sql_lines.append(sql_line)
        # mssql.close
        return sql_lines


    def get_sql_create_table_to_pg(self, table):                # Возвращает строку с правильным SQL для создания таблицы в PG   
        sql = f"""CREATE TABLE IF NOT EXISTS"{table}"(\n"""
        c = 0
        sql_lenes = self.get_MStoPG_columns(table)
        for sql_lene in sql_lenes:
            c+=1
            sql += sql_lene
            if c < len(sql_lenes):
                sql += ',\n'
        pk_str = mssql.get_primaryKeys(table)
        if pk_str:
            sql += ',\n' + pk_str + '\n'
        sql += ');'
        return(sql)

    def transfer_table(self, table):
        sql = self.get_sql_create_table_to_pg(table)
        pgsql.create_table(sql)

    def gen_S(self, table):
        count_columns = mssql.len_columns(table)
        s_values = (", ".join(['%s' for x in range(count_columns)]))
        return s_values

 
mssql = ms_sql.MsSql(
    odbc_driver=config.odbc_driver,
    server=config.ms_server,
    database=config.ms_database,
    username=config.ms_username,
    password=config.ms_password,
    table_schem=config.table_schem
)

pgsql = pg_sql.PgSql(
    server=config.pg_server,
    database=config.pg_database,
    username=config.pg_username,
    password=config.pg_password
)


mssql.connect()
pgsql.connect()

transfer = MStoPGsql()

tables = transfer.get_MS_tables(ignore_tables=config.ignore_tables)

for table in tables:
    print(table)
    s_values = transfer.gen_S(table)
    transfer.transfer_table(table)
    
    count_records_table = mssql.len_records_in_table(table)
    all_records_in_table = mssql.get_all_records(table)
    
    sql_s = []
    cicle = 0
    pull = config.pull
    for row in all_records_in_table:
        cicle += 1
        sql_s.append(row)
        
        if not cicle%pull:                  # Если заполнился пул, то скидываем его на загрузку в посгрес
            pgsql.insert_many(table=table, s_values=s_values, list_records=sql_s)
            print('\t Pull', table, 'cicle ==>', cicle, 'count_records_table ==>', count_records_table, 'len sql_s ==>', len(sql_s))
            sql_s = []
        
    pgsql.insert_many(table=table, s_values=s_values, list_records=sql_s)
    print('\tEnd', table, 'count_records_table ==>', count_records_table, 'len sql_s ==>', len(sql_s))
    print()

mssql.close
pgsql.close
 