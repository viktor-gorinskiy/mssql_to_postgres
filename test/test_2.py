import pyodbc
import config

import psycopg2
import config
from psycopg2 import Error
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
import psycopg2


conn = psycopg2.connect(dbname=config.ps_database, user=config.ps_username, 
                        password=config.ps_password, host=config.ps_server)

ms_database = 'TelephoneDirectory'
table = 'MTS_MobilBalans'
# ms_database = 'MagicBrain'
# table = 'Oper'

connection = pyodbc.connect('DRIVER={FreeTDS};' + f"SERVER={config.ms_server};DATABASE={ms_database};UID={config.ms_username};PWD={config.ms_password}")
cursor_ms = connection.cursor()

# table = 'MobilInfo'
# table = 'ATSLine'
# # table = 'Oper'

# table = 'MTS_MobilLim2018'
# table = 'sysdiagrams'

    
def return_type(type_data, len_data, scale):
    if type_data == 'int': return 'INT'
    if type_data == 'int identity': return 'INT GENERATED BY default AS IDENTITY'
    if type_data == 'smallint': return 'SMALLINT'
    if type_data == 'nchar': return f'CHAR({len_data})'
    if type_data == 'nvarchar': return f'VARCHAR({len_data})'
    if type_data == 'decimal': return f'DECIMAL({len_data}, {scale})'
    if type_data == 'float': return 'DOUBLE PRECISION'
    if type_data == 'tinyint': return 'SMALLINT'
    if type_data == 'bit': return 'BOOLEAN'
    if type_data == 'datetime': return 'TIMESTAMP'
    if type_data == 'date': return 'DATE'
    if type_data == 'uniqueidentifier': return 'CHAR(16)'
    if type_data == 'ntext': return 'TEXT'
    return type_data

def return_null(is_nul):
    if is_nul == 'YES': return 'NULL'
    return 'NOT NULL'

def return_primaryKeys(primaryKeys):
    print('++++++++++',primaryKeys)
    return f"PRIMARY KEY {primaryKeys}"


def get_columns(table):
    columns = cursor_ms.columns(table=table)
    sql_lines = []
    for column in columns:
        type_d = return_type(column[5], column[6], column[8])
        is_null= return_null(column[17])
        sql_line = f""""{column[3]}" {type_d} {is_null}"""
        sql_lines.append(sql_line)
    return sql_lines


def get_primaryKeys(table):
    primaryKeys = cursor_ms.primaryKeys(table=table)
    for row in primaryKeys:
        print('row', row, type(row))
        return return_primaryKeys(row)
    return False

print('\n','primaryKeys')
primaryKeys = cursor_ms.primaryKeys(table=table)                                                                                                        
for row in primaryKeys:
    print(row)
    
    
def get_sql(table):
    sql = f"""CREATE TABLE "{table}"(\n"""
    c = 0
    sql_lenes = get_columns(table)
    for sql_lene in sql_lenes:
        c+=1
        sql += sql_lene
        if c < len(sql_lenes):
            sql += ',\n'
        
    pk_str = get_primaryKeys(table)
   
    if pk_str:
        sql += ',\n' + pk_str + '\n'
    sql += ');'
    return(sql)


# pk = get_primaryKeys(table)
# print('!!!!!!!pk', pk)

sql = get_sql(table)
print(sql)

# cursor = conn.cursor()
# cursor.execute(sql)
# conn.commit()
    
    
# row ('MagicBrain',         'dbo', 'Oper',    'opID', 1, 'PK__Oper__3E723F9C') <class 'pyodbc.Row'>
# row ('TelephoneDirectory', 'dbo', 'ATSLine', 'Id',   1, 'PK_ATSLine'        ) <class 'pyodbc.Row'>